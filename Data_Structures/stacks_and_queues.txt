Questions:

1. What is the main difference between a stack and a queue?

   Stacks typically rely on a LIFO (last in first out) type of organization, and also relies more on using PUSH and POP to
   arrange its data, removing or adding the information that is the most recent. 

   Queues typically is better suited to handle user interactions better since it is able to queue requests in the order that
   they are received then execute them upon that same order. Think of a line at a deli. This means that queues operate in a
   more FIFO type arrangement. The first in is the first out. It's a better way to keep track of data that is inherently
   more scattered. 


2. What are the similarities between stacks and queues?

   Both of these structures are similar in that they organize data in the fashion of a line as well as by the timing that
   the data is received or created. They just do so opposite of each other. 


3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft
   Word. Which data structure would you use for each option and why?

   I think for this function a stack data structure would be the best data structure, since this function is usually
   manipulates data in a LIFO manner. The last change made is going to be the first one manipulated.  


Programming Questions:

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".


Code:	function reverseString(string) {
 	  var backwardsString = [];
  	  for (var i = 0; i <= string.length; i++) {
   	    backwardsString.push(string.charAt(string.length -i));
  	  }
  	  return backwardsString.join("");
	} 

	console.log(reverseString("Bloc!"))


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

Code:	class Stack{
  	  constructor(){
    	    this.pop = function(queue){
      	    var newQueue = [];
      	    var popItem = [];
      
      	    for( var i = 0; i < queue.length; i++){
              if( i == queue.length -1){
                popItem.push(queue[i]);
              }
            else
            {
              newQueue.push(queue[i] -1);
            }
      	   }
      	   return popItem;
    	   }
  	  } 
	}

var stack = new Stack();
console.log(stack.pop("Bloc!"));



"To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned."



1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

Code:

	class Queue{
  	  constructor(){
    	    this.items = [];
  	  }
 	
	  enqueue(data){
   	    this.items.push(data);
 	  }
 	
	  dequeue(data){
   	    if(this.isEmpty()){
     	      return "It's empty";
   	      return this.items.shift();
   	    }
  	  }

  	  isEmpty(){
    	    return this.items.length == 0;
   	  }
 	}


	var queue = new Queue();

	queue.enqueue(5);
	queue.enqueue(5);

	console.log(queue)
	queue.dequeue();
	console.log(queue);


* Note: there's a typo in this checkpoint at the end of the second paragraph under the objectives portion. It is missing "for" in the sentence, "then stacks and queues are the data structures !(needs for)! you."