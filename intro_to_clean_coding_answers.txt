Questions:

1. In your own words, explain what clean code is and why it is important.

A: Clean code is a way (or multiple ways) to write code so that it is easier to understand, namely by other programmers. This is especially important when working in teams, because a larger and more complex project can be made even more complex (far more than necessary) by code that isn't written clearly and as simply as possible. 


2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: It's interesting that something so important wasn't thoroughly checked before it was put out and human lives were put on the line -- even lost. Though, it isn't as detrimental should it fail, I work in IT and we rely heavily on software to make sure everything is running smoothly. 

To think of the uproar and loss in business if something like our point of sale software wasn't up to standard. It would cause a lot of frustrated customers and employees alike. 


3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: No, I would not. The naming is vague, there are way too many extraneous comments --something that shouldn't be needed if the name was done more clearly. Perhaps this would be more clearly understandable:


	FUNCTION convertTemp(temp1, temp2)
	  IF temp2 = fahrenheit THEN
	    SET temperature to (temp1-32.00) * (5/9)
	  PRINT temperature 
	  
          ELSE IF temp2 = celsius THEN
	    SET temperature to temp1 * 1.8000 + 32.00
	    PRINT temperature
	  END IF
	END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

	FUNCTION calcPercent(sum, total)
	  IF NOT(total = 0) THEN
     	    SET percentage to sum / total * 100
 	  ELSE
   	    PRINT "Sorry, cannot divide by 0"
 	  END IF

 	  PRINT percentage
	END FUNCTION

A: This is definitely a lot better than the one above. It has clear naming. It has a verb as the function name. The nesting goes no deeper than two levels. I think it's easy to read. 


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a (refactored).

	FUNCTION checkout(subTotal, discount, paymentType)
	  SET variable cardTotal = subTotal * discountRate + (subTotal *tax)
	  SET variable cashTotal = amount - subTotal * discountRate + (subTotal * tax)
	PRINT "Your total is:" + totalDue
	  IF paymentType = "CASH" THEN
	    PRINT "Change due:" + cashTotal
	  ELSE IF paymentType = "CREDIT CARD" THEN
	    CALL getPayment RETURNING amount
	    PRINT "Your card has been charged:" + cardTotal
	  END IF
	END FUNCTION
	  

	


b (refactored).

	FUNCTION checkoutBook(book, guest)
	  IF guest.accountActive && IF NOT guest.hasOverDueBooks && guest.outstandingFees == 0 
       	    THEN APPEND book to guest.books
	      SET book.status to "Checked Out"
	      PRINT "Your books have been issued."
	  ELSE
	    PRINT "Unable to check out book."
	  END IF
	END FUNCTION



c (refactored). I am honestly not seeing anything particularly wrong with this one. It makes sense to me. 

	

Programming Questions (JavaScript):

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.


Code: 

function perfectSquare (numbers){
  let sum = 0;
  for(let i = 0; i < numbers.length; i++){
    sum = sum +numbers[i];
  }
    if(Math.sqrt(numbers) % 1 == 0){
      return numbers
    }
    else {
      return sum;
  }
}

console.log(perfectSquare([1,2,3,4,5,6,7,8,9]));



7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


Code:

function findDuplicates(numbers){
  var counts = []
  for( let i =0; i < numbers.length; i++){
    if( counts[numbers[i]]=== undefined){
      counts[numbers[i]] = 1;
    } 
    else
    {
      return true;
    }
  }
  return false;
}
console.log(findDuplicates([1, 7, 2, 3, 9, 4]));



8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.


Code:

function anagram(string1, string2){
  return string1.split('').sort().join() == string2.split('').sort().join();
}

console.log(anagram("part","trap"));


